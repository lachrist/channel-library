var TEMPLATE_CHILD_URL = URL.createObjectURL(new Blob([
  "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\nvar Split = require(\"./split.js\");\nvar Trace = require(\"./trace.js\");\n\nexports.split = Split(exports);\nexports.trace = Trace(exports);\n\n},{\"./split.js\":2,\"./trace.js\":3}],2:[function(require,module,exports){\n\nmodule.exports = function (prototype) {\n  return function (splitters) {\n    var emitters = {};\n    for (var i=0; i<splitters.length; i++) {\n      emitters[splitters[i]] = Object.create(prototype);\n      Object.assign(emitters[splitters[i]], this);\n      emitters[splitters[i]].__prefix__ += \"/\"+splitters[i];\n    }\n    return emitters;\n  };\n};\n\n},{}],3:[function(require,module,exports){\n\nvar LogSocket = require(\"../../util/log-socket.js\");\n\nvar rcounter = 0;\nvar ccounter = 0;\n\nfunction request (method, path, headers, body, callback) {\n  var name = this.__name__;\n  var path = this.__prefix__+path;\n  var id = rcounter++;\n  console.log(name+\"req#\"+id+\" \"+method+\" \"+path+\" \"+JSON.stringify(headers)+\" \"+body);\n  if (!callback) {\n    var res = this.__emitter__.request(method, path, headers, body);\n    console.log(name+\"res#\"+id+\" \"+res[0]+\" \"+res[1]+\" \"+JSON.stringify(res[2])+\" \"+res[3]);\n    return res;\n  }\n  this.__emitter__.request(method, path, headers, body, function (error, status, reason, headers, body) {\n    console.log(name+\"res#\"+id+\" \"+status+\" \"+reason+\" \"+JSON.stringify(headers)+\" \"+body);\n    callback(error, status, reason, headers, body);\n  });\n}\n\nfunction connect (path) {\n  var id = ccounter++;\n  console.log(this.__name__+\"con#\"+id+\" \"+this.__prefix__+path);\n  return LogSocket(this.__emitter__.connect(this.__prefix__+path), this.__name__+\"con#\"+id);\n}\n\nmodule.exports = function (prototype) {\n  return function (name) {\n    var self = Object.create(prototype);\n    self.request = request;\n    self.connect = connect;\n    self.__prefix__ = \"\";\n    self.__emitter__ = this;\n    self.__name__ = name || \"\";\n    return self;\n  };\n};\n\n},{\"../../util/log-socket.js\":9}],4:[function(require,module,exports){\n\nvar Pool = require(\"../util/pool.js\");\nvar Prototype = require(\"./prototype\");\n\nfunction request (method, path, headers, body, callback) {\n  if (!callback) {\n    this.__views__.lock[0] = 1;\n    postMessage({\n      name: \"sync\",\n      method: method,\n      path: this.__prefix__+path,\n      headers: headers,\n      body: body\n    });\n    while (this.__views__.lock[0]);\n    if (this.__views__.length[0] > this.__views__.data.length)\n      throw new Error(\"Response too long for \"+method+\" \"+path);\n    var data = JSON.parse(String.fromCharCode.apply(null, this.__views__.data.slice(0, this.__views__.length[0])));;\n    return [data.status, data.reason, data.headers, data.body];\n  }\n  for (var i=0; i<=this.__callbacks__.length; i++) {\n    if (!this.__callbacks__[i]) {\n      this.__callbacks__[i] = callback;\n      return postMessage({\n        name: \"async\",\n        index: i,\n        method: method,\n        path: this.__prefix__+path,\n        headers: headers,\n        body: body\n      });\n    }\n  }\n}\n\nfunction connect (path) {\n  var index = this.__pool__free__();\n  postMessage({\n    name: \"open\",\n    path: this.__prefix__+path,\n    index: index\n  });\n  return this.__pool__add__(index);\n}\n\nvar singleton = false;\n\nmodule.exports = function (size) {\n  if (singleton)\n    throw new Error(\"Only one webworker emitter can be created...\");\n  singleton = true;\n  var callbacks = [];\n  var pool = Pool(postMessage);\n  var handlers = {\n    close: pool.onclose,\n    message: pool.onmessage,\n    open: pool.onopen,\n    async: function (data) {\n      callbacks[data.index](null, data.status, data.reason, data.headers, data.body);\n      delete callbacks[data.index];\n    }\n  };\n  onmessage = function (message) {\n    handlers[message.data.name](message.data)\n  };\n  var shared = new SharedArrayBuffer(2*(size||1024)+8);\n  postMessage(shared);\n  var views = {};\n  views.lock = new Uint8Array(shared, 0, 1);\n  views.length = new Uint32Array(shared, 4, 1);\n  views.data = new Uint16Array(shared, 8);\n  var self = Object.create(Prototype);\n  self.request = request;\n  self.connect = connect;\n  self.__prefix__ = \"\";\n  self.__callbacks__ = callbacks;\n  self.__views__ = views;\n  self.__pool__add__ = pool.add;\n  self.__pool__free__ = pool.free;\n  return self;\n};\n\n},{\"../util/pool.js\":10,\"./prototype\":1}],5:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],6:[function(require,module,exports){\n(function (global){\n\nvar EmitterWebworker = require(\"../../emitter/webworker\");\nvar Events = require(\"events\");\nvar Stream = require(\"../util/stream.js\");\nvar Console = require(\"../util/console.js\");\n\nvar emitters = EmitterWebworker().split([\"antena\", \"user\"]);\nvar mock = new Events();\nglobal.process = mock;\nmock.exit = function (code) { emitters.antena.request(\"GET\", \"/end\", {}, JSON.stringify(code)) }\nvar counter = 0;\n\n(function (con) {\n  counter++;\n  con.on(\"open\", function () {\n    mock.stdin = new Stream.Readable();\n    mock.stdin.setEncoding(\"utf8\");\n    con.on(\"message\", function (message) { mock.stdin.push(message, \"utf8\") });\n    mock.stdout = new Stream.Writable({\n      decodeStrings: false,\n      write: function (chunk, encoding, callback) { con.send(chunk.toString(encoding), callback) }\n    });\n    mock.stdout.setDefaultEncoding(\"utf8\");\n    global.console = Console(mock.stdout);\n  });\n} (emitters.antena.connect(\"/io\")));\n\n(function (con) {\n  counter++;\n  con.on(\"open\", function () {\n    mock.stderr = new Stream.Writable({\n      decodeStrings: false,\n      write: function (chunk, encoding, callback) { con.send(chunk.toString(encoding), callback) } \n    });\n    mock.stderr.setDefaultEncoding(\"utf8\");\n    ready();\n  });\n} (emitters.antena.connect(\"/err\")));\n\n(function (con) {\n  counter++\n  con.on(\"open\", function () {\n    con.on(\"message\", function (message) { mock.emit(\"message\", JSON.parse(message)) });\n    mock.send = function (message, callback) { con.send(JSON.stringify(message), callback) };\n    ready();\n  });\n} (emitters.antena.connect(\"/ipc\")));\n\nfunction ready () {\n  if (!--counter) {\n    emitters.antena.request(\"GET\", \"/begin\", {}, \"\", function (error, status, reason, header, body) {\n      if (error || status !== 200)\n        throw error || new Error(status+\" \"+reason);\n      var data = JSON.parse(body);\n      mock.argv = [\"browser\", data.source.path].concat(data.argv);\n      if (data.source.content)\n        return global.eval(data.source.content);\n      var req = new XMLHttpRequest();\n      req.open(\"GET\", data.source.path);\n      req.onload = function () {\n        if (req.status !== 200)\n          throw new Error(\"Cannot load \"+source+\": \"+req.status+\" \"+req.statusText);\n        global.eval(req.responseText);\n      };\n      req.send();\n    });\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../emitter/webworker\":4,\"../util/console.js\":7,\"../util/stream.js\":8,\"events\":5}],7:[function(require,module,exports){\n\nfunction log (writable) {\n  var args = [];\n  for (var i=0; i<arguments.length; i++)\n    args.push(\"\"+arguments[i]);\n  this._writable.write(args.join(\" \")+\"\\n\");\n}\n\nmodule.exports = function (writable) {\n  return {\n    _writable: writable,\n    log: log\n  };\n};\n\n},{}],8:[function(require,module,exports){\n\nvar Events = require(\"events\");\n\nfunction destroy (error) {\n  if (error)\n    this.emit(\"error\");\n  this.emit(\"close\");\n}\n\n//////////////\n// Readable //\n//////////////\n\nfunction push (data) {\n  if (data === null) {\n    this.emit(\"end\");\n    this.emit(\"close\");\n  } else if (this.listenerCount(\"data\")) {\n    this.emit(\"data\", data);\n  } else {\n    this._buffer += data;\n  }\n}\n\nfunction onnewlistener (name, listener) {\n  if (event === \"data\") {\n    for (var i=0; i<this._buffer.length; i++)\n      listener.call(this, this._buffer[i]);\n    this._buffer = [];\n  }\n}\n\nexports.Readable = function () {\n  var readable = new Events();\n  readable.on(\"newListener\", onnewlistener);\n  readable._buffer = [];\n  readable.push = push;\n  readable.destroy = destroy;\n  return readable;\n};\n\n//////////////\n// Writable //\n//////////////\n\nfunction noop () {}\n\nfunction end (chunk, encoding, callback) {\n  if (chunk)\n    this.write(chunk, encoding, callback);\n  this.emit(\"finish\");\n  this.emit(\"close\");\n}\n\nfunction write (chunk, encoding, callback) {\n  if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  }\n  this._write(chunk, encoding, callback || noop);\n}\n\nexports.Writable = function (options) {\n  var writable = new Events();\n  writable._write = options.write;\n  writable.write = write;\n  writable.end = end;\n  writable.destroy = destroy;\n  return readable;\n};\n\n},{\"events\":5}],9:[function(require,module,exports){\n\nvar Events = require(\"events\");\n\nmodule.exports = function (con, name) {\n  var wrapper = new Events();\n  wrapper.send = function (message) {\n    console.log(name+\" >> \"+message);\n    con.send(message);\n  };\n  wrapper.close = function (code, reason) {\n    console.log(name+\" close \"+code+\" \"+reason);\n    con.close(code, reason);\n  };\n  con.on(\"message\", function (message) {\n    console.log(name+\" << \"+message);\n    wrapper.emit(\"message\", message);\n  });\n  con.on(\"close\", function (code, reason) {\n    console.log(name+\" onclose \"+code+\" \"+reason);\n    wrapper.emit(\"close\", code, reason);\n  });\n  con.on(\"open\", function () {\n    console.log(name+\" onopen\");\n    wrapper.emit(\"open\");\n  });\n  con.on(\"error\", function (error) {\n    console.log(name+\" onerror \"+error.message);\n    wrapper.emit(\"error\", error);\n  });\n  return wrapper;\n};\n\n},{\"events\":5}],10:[function(require,module,exports){\n\nvar Events = require(\"events\");\n\nfunction signal (error) { throw error } \n\nmodule.exports = function (post) {\n\n  var pool = [];\n\n  function send (message, callback) {\n    if (this !== pool[this._index_]) {\n      callback = callback || signal;\n      return callback(new Error(\"Connection closed\"));\n    }\n    post({\n      name: \"message\",\n      index: this._index_,\n      message: message\n    });\n    callback && callback();\n  }\n\n  function close (code, reason) {\n    if (this === pool[this._index_]) {\n      pool[this._index_] = null;\n      this.emit(\"close\", code, reason);\n      post({\n        name: \"close\",\n        index: this._index_,\n        code: code,\n        reason: reason\n      });\n    }\n  }\n\n  return {\n    free: function () {\n      index = pool.indexOf(null);\n      return index === -1 ? pool.length : index;\n    },\n    add: function (index) {\n      var con = new Events();\n      pool[index] = con;\n      con.send = send;\n      con.close = close;\n      Object.defineProperty(con, \"_index_\", {value:index});\n      return con;\n    },\n    terminate: function () {\n      pool.forEach(function (con) { con.emit(\"close\", 1001, \"CLOSE_GOING_AWAY\") });\n      pool = [];\n    },\n    onclose: function (data) {\n      pool[data.index].emit(\"close\", data.code, data.reason);\n      pool[data.index] = null;\n    },\n    onmessage: function (data) {\n      pool[data.index].emit(\"message\", data.message);\n    },\n    onopen: function (data) {\n      pool[data.index].emit(\"open\");\n    }\n  };\n\n};\n\n},{\"events\":5}]},{},[6]);\n"
], {type: "application/javascript"}));

var Events = require("events");
var Stream = require("stream");
var Receptor = require("../../receptor");
var Handlers = require("../../receptor/handlers-browser");
var Terminate = require("../util/terminate.js");

function write (data) { this.emit("data", data) }

module.exports = function (source, argv, receptor) {
  var child = new Events();
  var buffers = {io:[], ipc:[]};
  var cons = {
    io: { send: function (message) { buffers.io.push(message) } },
    ipc: { send: function (message) { buffers.ipc.push(message) } }
  };
  child.send = function (json) { cons.ipc.send(JSON.stringify(json)) };
  child.stdin = new Stream.Writable({
    decodeStrings: false,
    write: function (chunk, encoding, callback) {
      cons.io.send(chunk.toString(encoding), callback);
    }
  });
  child.stdout = new Stream.Readable();
  child.stderr = new Stream.Readable();
  child.stdin.setDefaultEncoding("utf8");
  child.stdout.setEncoding("utf8");
  child.stdout.setEncoding("utf8");
  child.stdio = [child.stdin, child.stdout, child.stderr];
  var worker = new Worker(TEMPLATE_CHILD_URL);
  var handlers = Handlers(Receptor({}).merge({
    user: receptor,
    antena: Receptor({
      onrequest: function (method, path, headers, body, callback) {
        if (path === "/begin")
          return callback(200, "ok", {}, JSON.stringify({
            source: typeof source === "string" ? {path:source} : source, 
            argv: argv || []
          }));
        if (path === "/end")
          return terminate(JSON.parse(body), null);
        callback(400, "invalid-path", {}, "");
      },
      onconnect: function (path, con) {
        if (path === "/io") {
          cons.io = con;
          con.on("message", function (message) { child.stdout.push(message) });
          buffers.io.forEach(function (message) { con.send(message) });
          buffers.io = null;
        } else if (path === "/err") {
          cons.err = con;
          con.on("message", function (message) { child.stderr.push(message) });
        } else if (path === "/ipc") {
          cons.ipc = con;
          con.on("message", function (message) { child.emit("message", JSON.parse(message)) });
          buffers.ipc.forEach(function (message) { con.send(message) });
          buffers.ipc = null;
        } else {
          con.close(4000, "invalid-path");
        }
      }
    })
  }), function (message) { worker.postMessage(message) });
  worker.onmessage = handlers.message;
  worker.onerror = function (error) {
    child.stderr.push(error && "stack" in error ? error.stack : ""+error+"\n");
  };
  function terminate (code, signal) {
    handlers.terminate();
    Terminate(child, code, signal);
  }
  child.kill = function (signal) { terminate(null, signal) };
  return child;
};
